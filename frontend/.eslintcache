[{"D:\\Documents\\organisms\\labelu\\frontend\\src\\index.tsx":"1","D:\\Documents\\organisms\\labelu\\frontend\\src\\reportWebVitals.ts":"2","D:\\Documents\\organisms\\labelu\\frontend\\src\\App.tsx":"3","D:\\Documents\\organisms\\labelu\\frontend\\src\\pages\\dataset\\index.tsx":"4","D:\\Documents\\organisms\\labelu\\frontend\\src\\components\\Header\\index.tsx":"5","D:\\Documents\\organisms\\labelu\\frontend\\src\\pages\\labeling\\index.tsx":"6","D:\\Documents\\organisms\\labelu\\frontend\\src\\pages\\labeling\\data.ts":"7","D:\\Documents\\organisms\\labelu\\frontend\\src\\pages\\labeling\\api\\index.ts":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":468,"mtime":1611327601639,"results":"12","hashOfConfig":"10"},{"size":210,"mtime":1610864346873,"results":"13","hashOfConfig":"10"},{"size":222,"mtime":1610862220958,"results":"14","hashOfConfig":"10"},{"size":5425,"mtime":1611409690288,"results":"15","hashOfConfig":"10"},{"size":155,"mtime":1610863784337,"results":"16","hashOfConfig":"10"},{"size":641,"mtime":1611407732161,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1uksxpr",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Documents\\organisms\\labelu\\frontend\\src\\index.tsx",[],["38","39"],"D:\\Documents\\organisms\\labelu\\frontend\\src\\reportWebVitals.ts",[],"D:\\Documents\\organisms\\labelu\\frontend\\src\\App.tsx",[],"D:\\Documents\\organisms\\labelu\\frontend\\src\\pages\\dataset\\index.tsx",[],"D:\\Documents\\organisms\\labelu\\frontend\\src\\components\\Header\\index.tsx",["40"],"import React from 'react'\r\nimport logo from '../../logo.svg'\r\nimport './index.css'\r\n\r\nconst Header: React.FC = () => {\r\n\treturn (\r\n\t\t<div className=\"topbar\">\r\n\t\t\t<img src={logo} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Header","D:\\Documents\\organisms\\labelu\\frontend\\src\\pages\\labeling\\index.tsx",["41","42","43"],"import React, { useState, useEffect } from 'react'\r\nimport { labels } from './data'\r\nimport './index.css'\r\nimport { submit, retrieve, retrieveSingle } from './api'\r\n\r\ninterface IInstance {\r\n\tfile: string,\r\n\timage: string,\r\n\tlabel: number,\r\n\tuid: string\r\n}\r\n\r\nconst insts: IInstance[] = []\r\n\r\nconst LabelingView: React.FC = () => {\r\n\r\n\tconst [instances, setInstances] = useState(insts)\r\n\tconst [currentIndex, setCurrentIndex] = useState(0)\r\n\tconst [label, setLabel] = useState(0);\r\n\tconst [jumpInput, setJumpInput] = useState(\"\");\r\n\r\n\tuseEffect(() => {\r\n\t\tretrieve()\r\n\t\t.then(({ data }) => {\r\n\t\t\tif(!data.success) {\r\n\t\t\t\tconsole.error(data.message)\r\n\t\t\t}\r\n\t\t\tsetInstances(data.data)\r\n\t\t\tif(currentIndex < instances.length)\r\n\t\t\t\tsetLabel(instances[currentIndex].label)\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconsole.error(err)\r\n\t\t})\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tif(instances.length === 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst uid = instances[currentIndex].uid\r\n\t\tconst file = instances[currentIndex].file\r\n\t\tretrieveSingle(uid, file)\r\n\t\t.then(({ data }) => {\r\n\t\t\tif(!data.success) {\r\n\t\t\t\tconsole.error(data.message)\r\n\t\t\t}\r\n\t\t\tif(currentIndex < instances.length)\r\n\t\t\t\tsetLabel(data.data.label)\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconsole.error(err)\r\n\t\t})\r\n\t}, [instances, currentIndex])\r\n\r\n\tconst handleCheckboxChange = (idx: number) => (event: any) => {\r\n\t\tconst label_tmp = label === null ? 0 : label\r\n\t\tif(event.target.checked)  setLabel(label_tmp | (1 << idx))\r\n\t\telse{\r\n\t\t\tsetLabel(label_tmp & (~(1 << idx)))\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleConfirm = () => {\r\n\t\tif(currentIndex >= instances.length){\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst uid = instances[currentIndex].uid\r\n\t\tconst file = instances[currentIndex].file\r\n\t\tsetLabel(0)\r\n\t\tsubmit(uid, file, 0)\r\n\t\t.then(({ data }) => {\r\n\t\t\tif(!data.success) {\r\n\t\t\t\tconsole.error(data.message)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconsole.error(err)\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleSubmit = (event: any) => {\r\n\t\tif(currentIndex >= instances.length){\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst uid = instances[currentIndex].uid\r\n\t\tconst file = instances[currentIndex].file\r\n\t\tsubmit(uid, file, label)\r\n\t\t.then(({ data }) => {\r\n\t\t\tif(!data.success) {\r\n\t\t\t\tconsole.error(data.message)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconsole.error(err)\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleJumpInputChange = (event: any) => {\r\n\t\tsetJumpInput(event.target.value)\r\n\t}\r\n\r\n\tconst handleJumpClick = (event: any) => {\r\n\t\tconst page = parseInt(jumpInput)\r\n\t\tif(!isNaN(page) && page >= 0 && page < instances.length) {\r\n\t\t\tsetLabel(instances[page].label)\r\n\t\t\tsetCurrentIndex(page)\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleIncrement = (num: number) => (event: any) => {\r\n\t\tconst page = currentIndex + num\r\n\t\tif(!isNaN(page) && page >= 0 && page < instances.length) {\r\n\t\t\tsetLabel(instances[page].label)\r\n\t\t\tsetCurrentIndex(page)\r\n\t\t}\r\n\t}\r\n\r\n\tconst handlePageChange = (num: number) => (event: any) => {\r\n\t\tif(!isNaN(num) && num >= 0 && num < instances.length) {\r\n\t\t\tsetLabel(instances[num].label)\r\n\t\t\tsetCurrentIndex(num)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"main-layout\">\r\n\t\t\t<h1>Labeling</h1>\r\n\t\t\t<div className=\"instance\">\r\n\t\t\t\t<div className=\"instance-image\">\r\n\t\t\t\t\t<img src={instances[currentIndex] && `/file/${instances[currentIndex].image}`} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"instance-image\">\r\n\t\t\t\t\t<img src={instances[currentIndex] && `/file/datasets/${instances[currentIndex].uid}/${instances[currentIndex].file}`} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"info\">\r\n\t\t\t\t\t<div className=\"vertical-divider\"></div>\r\n\t\t\t\t\t<div className=\"instance-properties\">\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h5>Image Uid:</h5>\r\n\t\t\t\t\t\t\t<p>{instances[currentIndex] && instances[currentIndex].uid}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h5>Image File:</h5>\r\n\t\t\t\t\t\t\t<p>{instances[currentIndex] && instances[currentIndex].image}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h5>Patch File:</h5>\r\n\t\t\t\t\t\t\t<p>{instances[currentIndex] && instances[currentIndex].file}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h5>Label</h5>\r\n\t\t\t\t\t\t\t<p>{label}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"checkboxes\">\r\n\t\t\t\t{labels.map((element, idx) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<span className=\"checkbox\">\r\n\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\tname=\"category\"\r\n\t\t\t\t\t\t\t\tchecked={Boolean((label===null?0:label) & (1<<idx))}\r\n\t\t\t\t\t\t\t\tonChange={handleCheckboxChange(idx)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t{element}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<button id=\"submit-button\" onClick={handleSubmit} disabled={label===null}>保存</button>\r\n\t\t\t<div className=\"paginator\">\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={handleIncrement(-1)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t&#10094;\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</span>\r\n\t\t\t\t{Array.from(Array(5).keys()).map(\r\n\t\t\t\t\titem => item + Math.min(instances.length-1-item, Math.max(currentIndex-2, 0))).filter(\r\n\t\t\t\t\t\titem => (item >= 0 && item < instances.length)\r\n\t\t\t\t\t\t).map((item, idx) => (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={handlePageChange(item)} \r\n\t\t\t\t\t\t\tstyle={item===currentIndex ? {color: \"blue\"} : {}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{item}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t))}\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={handleIncrement(1)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t&#10095;\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</span>\r\n\t\t\t\t<span><button onClick={handleConfirm}>确认良性</button></span>\r\n\t\t\t\t<span></span>\r\n\t\t\t\t<span><button onClick={handleJumpClick}>跳转</button></span>\r\n\t\t\t\t<span><input type=\"text\" value={jumpInput} onChange={handleJumpInputChange} /></span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default LabelingView\r\n","D:\\Documents\\organisms\\labelu\\frontend\\src\\pages\\labeling\\data.ts",["44"],"import LabelingView from \".\";\r\n\r\nexport const labels: string[] = [\"线索细胞\", \"降解的线索细胞\", \"滴虫\", \"乳杆菌\", \"念珠菌\", \"白细胞\"]","D:\\Documents\\organisms\\labelu\\frontend\\src\\pages\\labeling\\api\\index.ts",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":8,"column":4,"nodeType":"51","endLine":8,"endColumn":22},{"ruleId":"52","severity":1,"message":"53","line":35,"column":5,"nodeType":"54","endLine":35,"endColumn":7,"suggestions":"55"},{"ruleId":"49","severity":1,"message":"50","line":131,"column":6,"nodeType":"51","endLine":131,"endColumn":87},{"ruleId":"49","severity":1,"message":"50","line":134,"column":6,"nodeType":"51","endLine":134,"endColumn":126},{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":20},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentIndex' and 'instances'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLabel' needs the current value of 'currentIndex'.","ArrayExpression",["62"],"@typescript-eslint/no-unused-vars","'LabelingView' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [currentIndex, instances]",{"range":"65","text":"66"},[826,828],"[currentIndex, instances]"]